{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { ListActionTypes } from './listActions.types';\nimport defaultReducer from './listReducer';\nimport useListChangeNotifiers from './useListChangeNotifiers';\nimport useControllableReducer from '../utils/useControllableReducer';\nimport areArraysEqual from '../utils/areArraysEqual';\nimport useLatest from '../utils/useLatest';\nimport useTextNavigation from '../utils/useTextNavigation';\nconst EMPTY_OBJECT = {};\n\nconst NOOP = () => {};\n\nconst defaultItemComparer = (optionA, optionB) => optionA === optionB;\n\nconst defaultIsItemDisabled = () => false;\n\nconst defaultItemStringifier = item => typeof item === 'string' ? item : String(item);\n\nconst defaultGetInitialState = () => ({\n  highlightedValue: null,\n  selectedValues: []\n});\n/**\n * The useList is a lower-level utility that is used to build list-like components.\n * It's used to manage the state of the list and its items.\n *\n * Supports highlighting a single item and selecting an arbitrary number of items.\n *\n * The state of the list is managed by a controllable reducer - that is a reducer that can have its state\n * controlled from outside.\n *\n * By default, the state consists of `selectedValues` and `highlightedValue` but can be extended by the caller of the hook.\n * Also the actions that can be dispatched and the reducer function can be defined externally.\n *\n * @template ItemValue The type of the item values.\n * @template State The type of the list state. This should be a subtype of `ListState<ItemValue>`.\n * @template CustomAction The type of the actions that can be dispatched (besides the standard ListAction).\n * @template CustomActionContext The shape of additional properties that will be added to actions when dispatched.\n *\n * @ignore - internal hook.\n */\n\n\nfunction useList(params) {\n  const {\n    controlledProps = EMPTY_OBJECT,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    focusManagement = 'activeDescendant',\n    getInitialState = defaultGetInitialState,\n    getItemDomElement,\n    getItemId,\n    isItemDisabled = defaultIsItemDisabled,\n    rootRef: externalListRef,\n    onStateChange = NOOP,\n    items,\n    itemComparer = defaultItemComparer,\n    getItemAsString = defaultItemStringifier,\n    onChange,\n    onHighlightChange,\n    orientation = 'vertical',\n    pageSize = 5,\n    reducerActionContext = EMPTY_OBJECT,\n    selectionMode = 'single',\n    stateReducer: externalReducer\n  } = params;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (focusManagement === 'DOM' && getItemDomElement == null) {\n      throw new Error('useList: The `getItemDomElement` prop is required when using the `DOM` focus management.');\n    }\n\n    if (focusManagement === 'activeDescendant' && getItemId == null) {\n      throw new Error('useList: The `getItemId` prop is required when using the `activeDescendant` focus management.');\n    }\n  }\n\n  const listRef = React.useRef(null);\n  const handleRef = useForkRef(externalListRef, listRef);\n  const handleHighlightChange = React.useCallback((event, value, reason) => {\n    onHighlightChange == null ? void 0 : onHighlightChange(event, value, reason);\n\n    if (focusManagement === 'DOM' && value != null && (reason === ListActionTypes.itemClick || reason === ListActionTypes.keyDown || reason === ListActionTypes.textNavigation)) {\n      var _getItemDomElement;\n\n      getItemDomElement == null ? void 0 : (_getItemDomElement = getItemDomElement(value)) == null ? void 0 : _getItemDomElement.focus();\n    }\n  }, [getItemDomElement, onHighlightChange, focusManagement]);\n  const stateComparers = React.useMemo(() => ({\n    highlightedValue: itemComparer,\n    selectedValues: (valuesArray1, valuesArray2) => areArraysEqual(valuesArray1, valuesArray2, itemComparer)\n  }), [itemComparer]); // This gets called whenever a reducer changes the state.\n\n  const handleStateChange = React.useCallback((event, field, value, reason, state) => {\n    onStateChange == null ? void 0 : onStateChange(event, field, value, reason, state);\n\n    switch (field) {\n      case 'highlightedValue':\n        handleHighlightChange(event, value, reason);\n        break;\n\n      case 'selectedValues':\n        onChange == null ? void 0 : onChange(event, value, reason);\n        break;\n\n      default:\n        break;\n    }\n  }, [handleHighlightChange, onChange, onStateChange]); // The following object is added to each action when it's dispatched.\n  // It's accessible in the reducer via the `action.context` field.\n\n  const listActionContext = React.useMemo(() => {\n    return {\n      disabledItemsFocusable,\n      disableListWrap,\n      focusManagement,\n      isItemDisabled,\n      itemComparer,\n      items,\n      getItemAsString,\n      onHighlightChange: handleHighlightChange,\n      orientation,\n      pageSize,\n      selectionMode,\n      stateComparers\n    };\n  }, [disabledItemsFocusable, disableListWrap, focusManagement, isItemDisabled, itemComparer, items, getItemAsString, handleHighlightChange, orientation, pageSize, selectionMode, stateComparers]);\n  const initialState = getInitialState();\n  const reducer = externalReducer != null ? externalReducer : defaultReducer;\n  const actionContext = React.useMemo(() => _extends({}, reducerActionContext, listActionContext), [reducerActionContext, listActionContext]);\n  const [state, dispatch] = useControllableReducer({\n    reducer,\n    actionContext,\n    initialState: initialState,\n    controlledProps,\n    stateComparers,\n    onStateChange: handleStateChange\n  });\n  const {\n    highlightedValue,\n    selectedValues\n  } = state;\n  const handleTextNavigation = useTextNavigation((searchString, event) => dispatch({\n    type: ListActionTypes.textNavigation,\n    event,\n    searchString\n  })); // introducing refs to avoid recreating the getItemState function on each change.\n\n  const latestSelectedValues = useLatest(selectedValues);\n  const latestHighlightedValue = useLatest(highlightedValue);\n  const previousItems = React.useRef([]);\n  React.useEffect(() => {\n    // Whenever the `items` object changes, we need to determine if the actual items changed.\n    // If they did, we need to dispatch an `itemsChange` action, so the selected/highlighted state is updated.\n    if (areArraysEqual(previousItems.current, items, itemComparer)) {\n      return;\n    }\n\n    dispatch({\n      type: ListActionTypes.itemsChange,\n      event: null,\n      items,\n      previousItems: previousItems.current\n    });\n    previousItems.current = items;\n  }, [items, itemComparer, dispatch]); // Subitems are notified of changes to the highlighted and selected values.\n  // This is not done via context because we don't want to trigger a re-render of all the subitems each time any of them changes state.\n  // Instead, we use a custom message bus to publish messages about changes.\n  // On the child component, we use a custom hook to subscribe to these messages and re-render only when the value they care about changes.\n\n  const {\n    notifySelectionChanged,\n    notifyHighlightChanged,\n    registerHighlightChangeHandler,\n    registerSelectionChangeHandler\n  } = useListChangeNotifiers();\n  React.useEffect(() => {\n    notifySelectionChanged(selectedValues);\n  }, [selectedValues, notifySelectionChanged]);\n  React.useEffect(() => {\n    notifyHighlightChanged(highlightedValue);\n  }, [highlightedValue, notifyHighlightChanged]);\n\n  const createHandleKeyDown = other => event => {\n    var _other$onKeyDown;\n\n    (_other$onKeyDown = other.onKeyDown) == null ? void 0 : _other$onKeyDown.call(other, event);\n\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n\n    const keysToPreventDefault = ['Home', 'End', 'PageUp', 'PageDown'];\n\n    if (orientation === 'vertical') {\n      keysToPreventDefault.push('ArrowUp', 'ArrowDown');\n    } else {\n      keysToPreventDefault.push('ArrowLeft', 'ArrowRight');\n    }\n\n    if (focusManagement === 'activeDescendant') {\n      // When the child element is focused using the activeDescendant attribute,\n      // the list handles keyboard events on its behalf.\n      // We have to `preventDefault()` is this case to prevent the browser from\n      // scrolling the view when space is pressed or submitting forms when enter is pressed.\n      keysToPreventDefault.push(' ', 'Enter');\n    }\n\n    if (keysToPreventDefault.includes(event.key)) {\n      event.preventDefault();\n    }\n\n    dispatch({\n      type: ListActionTypes.keyDown,\n      key: event.key,\n      event\n    });\n    handleTextNavigation(event);\n  };\n\n  const createHandleBlur = other => event => {\n    var _other$onBlur, _listRef$current;\n\n    (_other$onBlur = other.onBlur) == null ? void 0 : _other$onBlur.call(other, event);\n\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n\n    if ((_listRef$current = listRef.current) != null && _listRef$current.contains(event.relatedTarget)) {\n      // focus remains within the list\n      return;\n    }\n\n    dispatch({\n      type: ListActionTypes.blur,\n      event\n    });\n  };\n\n  const getRootProps = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _extends({}, otherHandlers, {\n      'aria-activedescendant': focusManagement === 'activeDescendant' && highlightedValue != null ? getItemId(highlightedValue) : undefined,\n      onBlur: createHandleBlur(otherHandlers),\n      onKeyDown: createHandleKeyDown(otherHandlers),\n      tabIndex: focusManagement === 'DOM' ? -1 : 0,\n      ref: handleRef\n    });\n  };\n\n  const getItemState = React.useCallback(item => {\n    var _latestSelectedValues;\n\n    const index = items.findIndex(i => itemComparer(i, item));\n    const selected = ((_latestSelectedValues = latestSelectedValues.current) != null ? _latestSelectedValues : []).some(value => value != null && itemComparer(item, value));\n    const disabled = isItemDisabled(item, index);\n    const highlighted = latestHighlightedValue.current != null && itemComparer(item, latestHighlightedValue.current);\n    const focusable = focusManagement === 'DOM';\n    return {\n      disabled,\n      focusable,\n      highlighted,\n      index,\n      selected\n    };\n  }, [items, isItemDisabled, itemComparer, latestSelectedValues, latestHighlightedValue, focusManagement]);\n  const contextValue = React.useMemo(() => ({\n    dispatch,\n    getItemState,\n    registerHighlightChangeHandler,\n    registerSelectionChangeHandler\n  }), [dispatch, getItemState, registerHighlightChangeHandler, registerSelectionChangeHandler]);\n  React.useDebugValue({\n    state\n  });\n  return {\n    contextValue,\n    dispatch,\n    getRootProps,\n    rootRef: handleRef,\n    state\n  };\n}\n\nexport default useList;","map":{"version":3,"sources":["C:/Users/Alain Paulin/Documents/GitHub/MyPortfolio/node_modules/@mui/base/useList/useList.js"],"names":["_extends","React","unstable_useForkRef","useForkRef","ListActionTypes","defaultReducer","useListChangeNotifiers","useControllableReducer","areArraysEqual","useLatest","useTextNavigation","EMPTY_OBJECT","NOOP","defaultItemComparer","optionA","optionB","defaultIsItemDisabled","defaultItemStringifier","item","String","defaultGetInitialState","highlightedValue","selectedValues","useList","params","controlledProps","disabledItemsFocusable","disableListWrap","focusManagement","getInitialState","getItemDomElement","getItemId","isItemDisabled","rootRef","externalListRef","onStateChange","items","itemComparer","getItemAsString","onChange","onHighlightChange","orientation","pageSize","reducerActionContext","selectionMode","stateReducer","externalReducer","process","env","NODE_ENV","Error","listRef","useRef","handleRef","handleHighlightChange","useCallback","event","value","reason","itemClick","keyDown","textNavigation","_getItemDomElement","focus","stateComparers","useMemo","valuesArray1","valuesArray2","handleStateChange","field","state","listActionContext","initialState","reducer","actionContext","dispatch","handleTextNavigation","searchString","type","latestSelectedValues","latestHighlightedValue","previousItems","useEffect","current","itemsChange","notifySelectionChanged","notifyHighlightChanged","registerHighlightChangeHandler","registerSelectionChangeHandler","createHandleKeyDown","other","_other$onKeyDown","onKeyDown","call","defaultMuiPrevented","keysToPreventDefault","push","includes","key","preventDefault","createHandleBlur","_other$onBlur","_listRef$current","onBlur","contains","relatedTarget","blur","getRootProps","otherHandlers","undefined","tabIndex","ref","getItemState","_latestSelectedValues","index","findIndex","i","selected","some","disabled","highlighted","focusable","contextValue","useDebugValue"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { ListActionTypes } from './listActions.types';\nimport defaultReducer from './listReducer';\nimport useListChangeNotifiers from './useListChangeNotifiers';\nimport useControllableReducer from '../utils/useControllableReducer';\nimport areArraysEqual from '../utils/areArraysEqual';\nimport useLatest from '../utils/useLatest';\nimport useTextNavigation from '../utils/useTextNavigation';\nconst EMPTY_OBJECT = {};\nconst NOOP = () => {};\nconst defaultItemComparer = (optionA, optionB) => optionA === optionB;\nconst defaultIsItemDisabled = () => false;\nconst defaultItemStringifier = item => typeof item === 'string' ? item : String(item);\nconst defaultGetInitialState = () => ({\n  highlightedValue: null,\n  selectedValues: []\n});\n\n/**\n * The useList is a lower-level utility that is used to build list-like components.\n * It's used to manage the state of the list and its items.\n *\n * Supports highlighting a single item and selecting an arbitrary number of items.\n *\n * The state of the list is managed by a controllable reducer - that is a reducer that can have its state\n * controlled from outside.\n *\n * By default, the state consists of `selectedValues` and `highlightedValue` but can be extended by the caller of the hook.\n * Also the actions that can be dispatched and the reducer function can be defined externally.\n *\n * @template ItemValue The type of the item values.\n * @template State The type of the list state. This should be a subtype of `ListState<ItemValue>`.\n * @template CustomAction The type of the actions that can be dispatched (besides the standard ListAction).\n * @template CustomActionContext The shape of additional properties that will be added to actions when dispatched.\n *\n * @ignore - internal hook.\n */\nfunction useList(params) {\n  const {\n    controlledProps = EMPTY_OBJECT,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    focusManagement = 'activeDescendant',\n    getInitialState = defaultGetInitialState,\n    getItemDomElement,\n    getItemId,\n    isItemDisabled = defaultIsItemDisabled,\n    rootRef: externalListRef,\n    onStateChange = NOOP,\n    items,\n    itemComparer = defaultItemComparer,\n    getItemAsString = defaultItemStringifier,\n    onChange,\n    onHighlightChange,\n    orientation = 'vertical',\n    pageSize = 5,\n    reducerActionContext = EMPTY_OBJECT,\n    selectionMode = 'single',\n    stateReducer: externalReducer\n  } = params;\n  if (process.env.NODE_ENV !== 'production') {\n    if (focusManagement === 'DOM' && getItemDomElement == null) {\n      throw new Error('useList: The `getItemDomElement` prop is required when using the `DOM` focus management.');\n    }\n    if (focusManagement === 'activeDescendant' && getItemId == null) {\n      throw new Error('useList: The `getItemId` prop is required when using the `activeDescendant` focus management.');\n    }\n  }\n  const listRef = React.useRef(null);\n  const handleRef = useForkRef(externalListRef, listRef);\n  const handleHighlightChange = React.useCallback((event, value, reason) => {\n    onHighlightChange == null ? void 0 : onHighlightChange(event, value, reason);\n    if (focusManagement === 'DOM' && value != null && (reason === ListActionTypes.itemClick || reason === ListActionTypes.keyDown || reason === ListActionTypes.textNavigation)) {\n      var _getItemDomElement;\n      getItemDomElement == null ? void 0 : (_getItemDomElement = getItemDomElement(value)) == null ? void 0 : _getItemDomElement.focus();\n    }\n  }, [getItemDomElement, onHighlightChange, focusManagement]);\n  const stateComparers = React.useMemo(() => ({\n    highlightedValue: itemComparer,\n    selectedValues: (valuesArray1, valuesArray2) => areArraysEqual(valuesArray1, valuesArray2, itemComparer)\n  }), [itemComparer]);\n\n  // This gets called whenever a reducer changes the state.\n  const handleStateChange = React.useCallback((event, field, value, reason, state) => {\n    onStateChange == null ? void 0 : onStateChange(event, field, value, reason, state);\n    switch (field) {\n      case 'highlightedValue':\n        handleHighlightChange(event, value, reason);\n        break;\n      case 'selectedValues':\n        onChange == null ? void 0 : onChange(event, value, reason);\n        break;\n      default:\n        break;\n    }\n  }, [handleHighlightChange, onChange, onStateChange]);\n\n  // The following object is added to each action when it's dispatched.\n  // It's accessible in the reducer via the `action.context` field.\n  const listActionContext = React.useMemo(() => {\n    return {\n      disabledItemsFocusable,\n      disableListWrap,\n      focusManagement,\n      isItemDisabled,\n      itemComparer,\n      items,\n      getItemAsString,\n      onHighlightChange: handleHighlightChange,\n      orientation,\n      pageSize,\n      selectionMode,\n      stateComparers\n    };\n  }, [disabledItemsFocusable, disableListWrap, focusManagement, isItemDisabled, itemComparer, items, getItemAsString, handleHighlightChange, orientation, pageSize, selectionMode, stateComparers]);\n  const initialState = getInitialState();\n  const reducer = externalReducer != null ? externalReducer : defaultReducer;\n  const actionContext = React.useMemo(() => _extends({}, reducerActionContext, listActionContext), [reducerActionContext, listActionContext]);\n  const [state, dispatch] = useControllableReducer({\n    reducer,\n    actionContext,\n    initialState: initialState,\n    controlledProps,\n    stateComparers,\n    onStateChange: handleStateChange\n  });\n  const {\n    highlightedValue,\n    selectedValues\n  } = state;\n  const handleTextNavigation = useTextNavigation((searchString, event) => dispatch({\n    type: ListActionTypes.textNavigation,\n    event,\n    searchString\n  }));\n\n  // introducing refs to avoid recreating the getItemState function on each change.\n  const latestSelectedValues = useLatest(selectedValues);\n  const latestHighlightedValue = useLatest(highlightedValue);\n  const previousItems = React.useRef([]);\n  React.useEffect(() => {\n    // Whenever the `items` object changes, we need to determine if the actual items changed.\n    // If they did, we need to dispatch an `itemsChange` action, so the selected/highlighted state is updated.\n    if (areArraysEqual(previousItems.current, items, itemComparer)) {\n      return;\n    }\n    dispatch({\n      type: ListActionTypes.itemsChange,\n      event: null,\n      items,\n      previousItems: previousItems.current\n    });\n    previousItems.current = items;\n  }, [items, itemComparer, dispatch]);\n\n  // Subitems are notified of changes to the highlighted and selected values.\n  // This is not done via context because we don't want to trigger a re-render of all the subitems each time any of them changes state.\n  // Instead, we use a custom message bus to publish messages about changes.\n  // On the child component, we use a custom hook to subscribe to these messages and re-render only when the value they care about changes.\n  const {\n    notifySelectionChanged,\n    notifyHighlightChanged,\n    registerHighlightChangeHandler,\n    registerSelectionChangeHandler\n  } = useListChangeNotifiers();\n  React.useEffect(() => {\n    notifySelectionChanged(selectedValues);\n  }, [selectedValues, notifySelectionChanged]);\n  React.useEffect(() => {\n    notifyHighlightChanged(highlightedValue);\n  }, [highlightedValue, notifyHighlightChanged]);\n  const createHandleKeyDown = other => event => {\n    var _other$onKeyDown;\n    (_other$onKeyDown = other.onKeyDown) == null ? void 0 : _other$onKeyDown.call(other, event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    const keysToPreventDefault = ['Home', 'End', 'PageUp', 'PageDown'];\n    if (orientation === 'vertical') {\n      keysToPreventDefault.push('ArrowUp', 'ArrowDown');\n    } else {\n      keysToPreventDefault.push('ArrowLeft', 'ArrowRight');\n    }\n    if (focusManagement === 'activeDescendant') {\n      // When the child element is focused using the activeDescendant attribute,\n      // the list handles keyboard events on its behalf.\n      // We have to `preventDefault()` is this case to prevent the browser from\n      // scrolling the view when space is pressed or submitting forms when enter is pressed.\n      keysToPreventDefault.push(' ', 'Enter');\n    }\n    if (keysToPreventDefault.includes(event.key)) {\n      event.preventDefault();\n    }\n    dispatch({\n      type: ListActionTypes.keyDown,\n      key: event.key,\n      event\n    });\n    handleTextNavigation(event);\n  };\n  const createHandleBlur = other => event => {\n    var _other$onBlur, _listRef$current;\n    (_other$onBlur = other.onBlur) == null ? void 0 : _other$onBlur.call(other, event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if ((_listRef$current = listRef.current) != null && _listRef$current.contains(event.relatedTarget)) {\n      // focus remains within the list\n      return;\n    }\n    dispatch({\n      type: ListActionTypes.blur,\n      event\n    });\n  };\n  const getRootProps = (otherHandlers = {}) => {\n    return _extends({}, otherHandlers, {\n      'aria-activedescendant': focusManagement === 'activeDescendant' && highlightedValue != null ? getItemId(highlightedValue) : undefined,\n      onBlur: createHandleBlur(otherHandlers),\n      onKeyDown: createHandleKeyDown(otherHandlers),\n      tabIndex: focusManagement === 'DOM' ? -1 : 0,\n      ref: handleRef\n    });\n  };\n  const getItemState = React.useCallback(item => {\n    var _latestSelectedValues;\n    const index = items.findIndex(i => itemComparer(i, item));\n    const selected = ((_latestSelectedValues = latestSelectedValues.current) != null ? _latestSelectedValues : []).some(value => value != null && itemComparer(item, value));\n    const disabled = isItemDisabled(item, index);\n    const highlighted = latestHighlightedValue.current != null && itemComparer(item, latestHighlightedValue.current);\n    const focusable = focusManagement === 'DOM';\n    return {\n      disabled,\n      focusable,\n      highlighted,\n      index,\n      selected\n    };\n  }, [items, isItemDisabled, itemComparer, latestSelectedValues, latestHighlightedValue, focusManagement]);\n  const contextValue = React.useMemo(() => ({\n    dispatch,\n    getItemState,\n    registerHighlightChangeHandler,\n    registerSelectionChangeHandler\n  }), [dispatch, getItemState, registerHighlightChangeHandler, registerSelectionChangeHandler]);\n  React.useDebugValue({\n    state\n  });\n  return {\n    contextValue,\n    dispatch,\n    getRootProps,\n    rootRef: handleRef,\n    state\n  };\n}\nexport default useList;"]},"metadata":{},"sourceType":"module"}