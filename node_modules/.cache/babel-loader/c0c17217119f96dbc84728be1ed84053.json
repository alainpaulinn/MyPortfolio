{"ast":null,"code":"import * as React from 'react';\nexport function createMessageBus() {\n  const listeners = new Map();\n\n  function subscribe(topic, callback) {\n    let topicListeners = listeners.get(topic);\n\n    if (!topicListeners) {\n      topicListeners = new Set([callback]);\n      listeners.set(topic, topicListeners);\n    } else {\n      topicListeners.add(callback);\n    }\n\n    return () => {\n      topicListeners.delete(callback);\n\n      if (topicListeners.size === 0) {\n        listeners.delete(topic);\n      }\n    };\n  }\n\n  function publish(topic) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    const topicListeners = listeners.get(topic);\n\n    if (topicListeners) {\n      topicListeners.forEach(callback => callback(...args));\n    }\n  }\n\n  return {\n    subscribe,\n    publish\n  };\n}\n/**\n * @ignore - internal hook.\n */\n\nexport default function useMessageBus() {\n  const bus = React.useRef();\n\n  if (!bus.current) {\n    bus.current = createMessageBus();\n  }\n\n  return bus.current;\n}","map":{"version":3,"sources":["C:/Users/Alain Paulin/Documents/GitHub/MyPortfolio/node_modules/@mui/base/utils/useMessageBus.js"],"names":["React","createMessageBus","listeners","Map","subscribe","topic","callback","topicListeners","get","Set","set","add","delete","size","publish","args","forEach","useMessageBus","bus","useRef","current"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,SAASC,gBAAT,GAA4B;AACjC,QAAMC,SAAS,GAAG,IAAIC,GAAJ,EAAlB;;AACA,WAASC,SAAT,CAAmBC,KAAnB,EAA0BC,QAA1B,EAAoC;AAClC,QAAIC,cAAc,GAAGL,SAAS,CAACM,GAAV,CAAcH,KAAd,CAArB;;AACA,QAAI,CAACE,cAAL,EAAqB;AACnBA,MAAAA,cAAc,GAAG,IAAIE,GAAJ,CAAQ,CAACH,QAAD,CAAR,CAAjB;AACAJ,MAAAA,SAAS,CAACQ,GAAV,CAAcL,KAAd,EAAqBE,cAArB;AACD,KAHD,MAGO;AACLA,MAAAA,cAAc,CAACI,GAAf,CAAmBL,QAAnB;AACD;;AACD,WAAO,MAAM;AACXC,MAAAA,cAAc,CAACK,MAAf,CAAsBN,QAAtB;;AACA,UAAIC,cAAc,CAACM,IAAf,KAAwB,CAA5B,EAA+B;AAC7BX,QAAAA,SAAS,CAACU,MAAV,CAAiBP,KAAjB;AACD;AACF,KALD;AAMD;;AACD,WAASS,OAAT,CAAiBT,KAAjB,EAAiC;AAAA,sCAANU,IAAM;AAANA,MAAAA,IAAM;AAAA;;AAC/B,UAAMR,cAAc,GAAGL,SAAS,CAACM,GAAV,CAAcH,KAAd,CAAvB;;AACA,QAAIE,cAAJ,EAAoB;AAClBA,MAAAA,cAAc,CAACS,OAAf,CAAuBV,QAAQ,IAAIA,QAAQ,CAAC,GAAGS,IAAJ,CAA3C;AACD;AACF;;AACD,SAAO;AACLX,IAAAA,SADK;AAELU,IAAAA;AAFK,GAAP;AAID;AAED;AACA;AACA;;AACA,eAAe,SAASG,aAAT,GAAyB;AACtC,QAAMC,GAAG,GAAGlB,KAAK,CAACmB,MAAN,EAAZ;;AACA,MAAI,CAACD,GAAG,CAACE,OAAT,EAAkB;AAChBF,IAAAA,GAAG,CAACE,OAAJ,GAAcnB,gBAAgB,EAA9B;AACD;;AACD,SAAOiB,GAAG,CAACE,OAAX;AACD","sourcesContent":["import * as React from 'react';\nexport function createMessageBus() {\n  const listeners = new Map();\n  function subscribe(topic, callback) {\n    let topicListeners = listeners.get(topic);\n    if (!topicListeners) {\n      topicListeners = new Set([callback]);\n      listeners.set(topic, topicListeners);\n    } else {\n      topicListeners.add(callback);\n    }\n    return () => {\n      topicListeners.delete(callback);\n      if (topicListeners.size === 0) {\n        listeners.delete(topic);\n      }\n    };\n  }\n  function publish(topic, ...args) {\n    const topicListeners = listeners.get(topic);\n    if (topicListeners) {\n      topicListeners.forEach(callback => callback(...args));\n    }\n  }\n  return {\n    subscribe,\n    publish\n  };\n}\n\n/**\n * @ignore - internal hook.\n */\nexport default function useMessageBus() {\n  const bus = React.useRef();\n  if (!bus.current) {\n    bus.current = createMessageBus();\n  }\n  return bus.current;\n}"]},"metadata":{},"sourceType":"module"}