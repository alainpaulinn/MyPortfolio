{"ast":null,"code":"'use client';\n\nimport React from 'react';\n/**\n * @internal\n */\n\nconst SkeletonThemeContext = React.createContext({});\n/* eslint-disable react/no-array-index-key */\n\nconst defaultEnableAnimation = true; // For performance & cleanliness, don't add any inline styles unless we have to\n\nfunction styleOptionsToCssProperties(_ref) {\n  let {\n    baseColor,\n    highlightColor,\n    width,\n    height,\n    borderRadius,\n    circle,\n    direction,\n    duration,\n    enableAnimation = defaultEnableAnimation\n  } = _ref;\n  const style = {};\n  if (direction === 'rtl') style['--animation-direction'] = 'reverse';\n  if (typeof duration === 'number') style['--animation-duration'] = `${duration}s`;\n  if (!enableAnimation) style['--pseudo-element-display'] = 'none';\n  if (typeof width === 'string' || typeof width === 'number') style.width = width;\n  if (typeof height === 'string' || typeof height === 'number') style.height = height;\n  if (typeof borderRadius === 'string' || typeof borderRadius === 'number') style.borderRadius = borderRadius;\n  if (circle) style.borderRadius = '50%';\n  if (typeof baseColor !== 'undefined') style['--base-color'] = baseColor;\n  if (typeof highlightColor !== 'undefined') style['--highlight-color'] = highlightColor;\n  return style;\n}\n\nfunction Skeleton(_ref2) {\n  let {\n    count = 1,\n    wrapper: Wrapper,\n    className: customClassName,\n    containerClassName,\n    containerTestId,\n    circle = false,\n    style: styleProp,\n    ...originalPropsStyleOptions\n  } = _ref2;\n\n  var _a, _b, _c;\n\n  const contextStyleOptions = React.useContext(SkeletonThemeContext);\n  const propsStyleOptions = { ...originalPropsStyleOptions\n  }; // DO NOT overwrite style options from the context if `propsStyleOptions`\n  // has properties explicity set to undefined\n\n  for (const [key, value] of Object.entries(originalPropsStyleOptions)) {\n    if (typeof value === 'undefined') {\n      delete propsStyleOptions[key];\n    }\n  } // Props take priority over context\n\n\n  const styleOptions = { ...contextStyleOptions,\n    ...propsStyleOptions,\n    circle\n  }; // `styleProp` has the least priority out of everything\n\n  const style = { ...styleProp,\n    ...styleOptionsToCssProperties(styleOptions)\n  };\n  let className = 'react-loading-skeleton';\n  if (customClassName) className += ` ${customClassName}`;\n  const inline = (_a = styleOptions.inline) !== null && _a !== void 0 ? _a : false;\n  const elements = [];\n  const countCeil = Math.ceil(count);\n\n  for (let i = 0; i < countCeil; i++) {\n    let thisStyle = style;\n\n    if (countCeil > count && i === countCeil - 1) {\n      // count is not an integer and we've reached the last iteration of\n      // the loop, so add a \"fractional\" skeleton.\n      //\n      // For example, if count is 3.5, we've already added 3 full\n      // skeletons, so now we add one more skeleton that is 0.5 times the\n      // original width.\n      const width = (_b = thisStyle.width) !== null && _b !== void 0 ? _b : '100%'; // 100% is the default since that's what's in the CSS\n\n      const fractionalPart = count % 1;\n      const fractionalWidth = typeof width === 'number' ? width * fractionalPart : `calc(${width} * ${fractionalPart})`;\n      thisStyle = { ...thisStyle,\n        width: fractionalWidth\n      };\n    }\n\n    const skeletonSpan = React.createElement(\"span\", {\n      className: className,\n      style: thisStyle,\n      key: i\n    }, \"\\u200C\");\n\n    if (inline) {\n      elements.push(skeletonSpan);\n    } else {\n      // Without the <br />, the skeleton lines will all run together if\n      // `width` is specified\n      elements.push(React.createElement(React.Fragment, {\n        key: i\n      }, skeletonSpan, React.createElement(\"br\", null)));\n    }\n  }\n\n  return React.createElement(\"span\", {\n    className: containerClassName,\n    \"data-testid\": containerTestId,\n    \"aria-live\": \"polite\",\n    \"aria-busy\": (_c = styleOptions.enableAnimation) !== null && _c !== void 0 ? _c : defaultEnableAnimation\n  }, Wrapper ? elements.map((el, i) => React.createElement(Wrapper, {\n    key: i\n  }, el)) : elements);\n}\n\nfunction SkeletonTheme(_ref3) {\n  let {\n    children,\n    ...styleOptions\n  } = _ref3;\n  return React.createElement(SkeletonThemeContext.Provider, {\n    value: styleOptions\n  }, children);\n}\n\nexport { SkeletonTheme, Skeleton as default };","map":{"version":3,"sources":["C:/Users/Alain Paulin/Documents/GitHub/MyPortfolio/node_modules/react-loading-skeleton/dist/index.js"],"names":["React","SkeletonThemeContext","createContext","defaultEnableAnimation","styleOptionsToCssProperties","baseColor","highlightColor","width","height","borderRadius","circle","direction","duration","enableAnimation","style","Skeleton","count","wrapper","Wrapper","className","customClassName","containerClassName","containerTestId","styleProp","originalPropsStyleOptions","_a","_b","_c","contextStyleOptions","useContext","propsStyleOptions","key","value","Object","entries","styleOptions","inline","elements","countCeil","Math","ceil","i","thisStyle","fractionalPart","fractionalWidth","skeletonSpan","createElement","push","Fragment","map","el","SkeletonTheme","children","Provider","default"],"mappings":"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","sourcesContent":["'use client';\nimport React from 'react';\n\n/**\n * @internal\n */\nconst SkeletonThemeContext = React.createContext({});\n\n/* eslint-disable react/no-array-index-key */\nconst defaultEnableAnimation = true;\n// For performance & cleanliness, don't add any inline styles unless we have to\nfunction styleOptionsToCssProperties({ baseColor, highlightColor, width, height, borderRadius, circle, direction, duration, enableAnimation = defaultEnableAnimation, }) {\n    const style = {};\n    if (direction === 'rtl')\n        style['--animation-direction'] = 'reverse';\n    if (typeof duration === 'number')\n        style['--animation-duration'] = `${duration}s`;\n    if (!enableAnimation)\n        style['--pseudo-element-display'] = 'none';\n    if (typeof width === 'string' || typeof width === 'number')\n        style.width = width;\n    if (typeof height === 'string' || typeof height === 'number')\n        style.height = height;\n    if (typeof borderRadius === 'string' || typeof borderRadius === 'number')\n        style.borderRadius = borderRadius;\n    if (circle)\n        style.borderRadius = '50%';\n    if (typeof baseColor !== 'undefined')\n        style['--base-color'] = baseColor;\n    if (typeof highlightColor !== 'undefined')\n        style['--highlight-color'] = highlightColor;\n    return style;\n}\nfunction Skeleton({ count = 1, wrapper: Wrapper, className: customClassName, containerClassName, containerTestId, circle = false, style: styleProp, ...originalPropsStyleOptions }) {\n    var _a, _b, _c;\n    const contextStyleOptions = React.useContext(SkeletonThemeContext);\n    const propsStyleOptions = { ...originalPropsStyleOptions };\n    // DO NOT overwrite style options from the context if `propsStyleOptions`\n    // has properties explicity set to undefined\n    for (const [key, value] of Object.entries(originalPropsStyleOptions)) {\n        if (typeof value === 'undefined') {\n            delete propsStyleOptions[key];\n        }\n    }\n    // Props take priority over context\n    const styleOptions = {\n        ...contextStyleOptions,\n        ...propsStyleOptions,\n        circle,\n    };\n    // `styleProp` has the least priority out of everything\n    const style = {\n        ...styleProp,\n        ...styleOptionsToCssProperties(styleOptions),\n    };\n    let className = 'react-loading-skeleton';\n    if (customClassName)\n        className += ` ${customClassName}`;\n    const inline = (_a = styleOptions.inline) !== null && _a !== void 0 ? _a : false;\n    const elements = [];\n    const countCeil = Math.ceil(count);\n    for (let i = 0; i < countCeil; i++) {\n        let thisStyle = style;\n        if (countCeil > count && i === countCeil - 1) {\n            // count is not an integer and we've reached the last iteration of\n            // the loop, so add a \"fractional\" skeleton.\n            //\n            // For example, if count is 3.5, we've already added 3 full\n            // skeletons, so now we add one more skeleton that is 0.5 times the\n            // original width.\n            const width = (_b = thisStyle.width) !== null && _b !== void 0 ? _b : '100%'; // 100% is the default since that's what's in the CSS\n            const fractionalPart = count % 1;\n            const fractionalWidth = typeof width === 'number'\n                ? width * fractionalPart\n                : `calc(${width} * ${fractionalPart})`;\n            thisStyle = { ...thisStyle, width: fractionalWidth };\n        }\n        const skeletonSpan = (React.createElement(\"span\", { className: className, style: thisStyle, key: i }, \"\\u200C\"));\n        if (inline) {\n            elements.push(skeletonSpan);\n        }\n        else {\n            // Without the <br />, the skeleton lines will all run together if\n            // `width` is specified\n            elements.push(React.createElement(React.Fragment, { key: i },\n                skeletonSpan,\n                React.createElement(\"br\", null)));\n        }\n    }\n    return (React.createElement(\"span\", { className: containerClassName, \"data-testid\": containerTestId, \"aria-live\": \"polite\", \"aria-busy\": (_c = styleOptions.enableAnimation) !== null && _c !== void 0 ? _c : defaultEnableAnimation }, Wrapper\n        ? elements.map((el, i) => React.createElement(Wrapper, { key: i }, el))\n        : elements));\n}\n\nfunction SkeletonTheme({ children, ...styleOptions }) {\n    return (React.createElement(SkeletonThemeContext.Provider, { value: styleOptions }, children));\n}\n\nexport { SkeletonTheme, Skeleton as default };\n"]},"metadata":{},"sourceType":"module"}