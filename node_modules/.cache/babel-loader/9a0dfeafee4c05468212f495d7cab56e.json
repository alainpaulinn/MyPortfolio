{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useId as useId, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport useButton from '../useButton';\nimport { useListItem } from '../useList';\nimport { useCompoundItem } from '../utils/useCompoundItem';\n\nfunction idGenerator(existingKeys) {\n  return `menu-item-${existingKeys.size}`;\n}\n/**\n *\n * Demos:\n *\n * - [Menu](https://mui.com/base/react-menu/#hooks)\n *\n * API:\n *\n * - [useMenuItem API](https://mui.com/base/react-menu/hooks-api/#use-menu-item)\n */\n\n\nexport default function useMenuItem(params) {\n  const {\n    disabled = false,\n    id: idParam,\n    rootRef: externalRef,\n    label\n  } = params;\n  const id = useId(idParam);\n  const itemRef = React.useRef(null);\n  const itemMetadata = React.useMemo(() => ({\n    disabled,\n    id: id != null ? id : '',\n    label,\n    ref: itemRef\n  }), [disabled, id, label]);\n  const {\n    getRootProps: getListRootProps,\n    highlighted,\n    rootRef: listItemRefHandler\n  } = useListItem({\n    item: id\n  });\n  const {\n    index,\n    totalItemCount\n  } = useCompoundItem(id != null ? id : idGenerator, itemMetadata);\n  const {\n    getRootProps: getButtonProps,\n    focusVisible,\n    rootRef: buttonRefHandler\n  } = useButton({\n    disabled,\n    focusableWhenDisabled: true\n  });\n  const handleRef = useForkRef(listItemRefHandler, buttonRefHandler, externalRef, itemRef);\n  React.useDebugValue({\n    id,\n    highlighted,\n    disabled,\n    label\n  }); // If `id` is undefined (during SSR in React < 18), we fall back to rendering a simplified menu item\n  // which does not have access to infortmation about its position or highlighted state.\n\n  if (id === undefined) {\n    return {\n      getRootProps: function () {\n        let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return _extends({}, otherHandlers, getButtonProps(otherHandlers), {\n          role: 'menuitem'\n        });\n      },\n      disabled: false,\n      focusVisible,\n      highlighted: false,\n      index: -1,\n      totalItemCount: 0,\n      rootRef: handleRef\n    };\n  }\n\n  const getRootProps = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    const resolvedButtonProps = _extends({}, otherHandlers, getButtonProps(otherHandlers));\n\n    const resolvedMenuItemProps = _extends({}, resolvedButtonProps, getListRootProps(resolvedButtonProps));\n\n    return _extends({}, otherHandlers, resolvedButtonProps, resolvedMenuItemProps, {\n      role: 'menuitem',\n      ref: handleRef\n    });\n  };\n\n  return {\n    getRootProps,\n    disabled,\n    focusVisible,\n    highlighted,\n    index,\n    totalItemCount,\n    rootRef: handleRef\n  };\n}","map":{"version":3,"sources":["C:/Users/Alain Paulin/Documents/GitHub/MyPortfolio/node_modules/@mui/base/useMenuItem/useMenuItem.js"],"names":["_extends","React","unstable_useId","useId","unstable_useForkRef","useForkRef","useButton","useListItem","useCompoundItem","idGenerator","existingKeys","size","useMenuItem","params","disabled","id","idParam","rootRef","externalRef","label","itemRef","useRef","itemMetadata","useMemo","ref","getRootProps","getListRootProps","highlighted","listItemRefHandler","item","index","totalItemCount","getButtonProps","focusVisible","buttonRefHandler","focusableWhenDisabled","handleRef","useDebugValue","undefined","otherHandlers","role","resolvedButtonProps","resolvedMenuItemProps"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useId as useId, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport useButton from '../useButton';\nimport { useListItem } from '../useList';\nimport { useCompoundItem } from '../utils/useCompoundItem';\nfunction idGenerator(existingKeys) {\n  return `menu-item-${existingKeys.size}`;\n}\n\n/**\n *\n * Demos:\n *\n * - [Menu](https://mui.com/base/react-menu/#hooks)\n *\n * API:\n *\n * - [useMenuItem API](https://mui.com/base/react-menu/hooks-api/#use-menu-item)\n */\nexport default function useMenuItem(params) {\n  const {\n    disabled = false,\n    id: idParam,\n    rootRef: externalRef,\n    label\n  } = params;\n  const id = useId(idParam);\n  const itemRef = React.useRef(null);\n  const itemMetadata = React.useMemo(() => ({\n    disabled,\n    id: id != null ? id : '',\n    label,\n    ref: itemRef\n  }), [disabled, id, label]);\n  const {\n    getRootProps: getListRootProps,\n    highlighted,\n    rootRef: listItemRefHandler\n  } = useListItem({\n    item: id\n  });\n  const {\n    index,\n    totalItemCount\n  } = useCompoundItem(id != null ? id : idGenerator, itemMetadata);\n  const {\n    getRootProps: getButtonProps,\n    focusVisible,\n    rootRef: buttonRefHandler\n  } = useButton({\n    disabled,\n    focusableWhenDisabled: true\n  });\n  const handleRef = useForkRef(listItemRefHandler, buttonRefHandler, externalRef, itemRef);\n  React.useDebugValue({\n    id,\n    highlighted,\n    disabled,\n    label\n  });\n\n  // If `id` is undefined (during SSR in React < 18), we fall back to rendering a simplified menu item\n  // which does not have access to infortmation about its position or highlighted state.\n  if (id === undefined) {\n    return {\n      getRootProps: (otherHandlers = {}) => _extends({}, otherHandlers, getButtonProps(otherHandlers), {\n        role: 'menuitem'\n      }),\n      disabled: false,\n      focusVisible,\n      highlighted: false,\n      index: -1,\n      totalItemCount: 0,\n      rootRef: handleRef\n    };\n  }\n  const getRootProps = (otherHandlers = {}) => {\n    const resolvedButtonProps = _extends({}, otherHandlers, getButtonProps(otherHandlers));\n    const resolvedMenuItemProps = _extends({}, resolvedButtonProps, getListRootProps(resolvedButtonProps));\n    return _extends({}, otherHandlers, resolvedButtonProps, resolvedMenuItemProps, {\n      role: 'menuitem',\n      ref: handleRef\n    });\n  };\n  return {\n    getRootProps,\n    disabled,\n    focusVisible,\n    highlighted,\n    index,\n    totalItemCount,\n    rootRef: handleRef\n  };\n}"]},"metadata":{},"sourceType":"module"}